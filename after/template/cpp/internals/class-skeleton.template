VimL:" class-skeleton File Template, Luc Hermitte <hermitte {at} free {dot} fr>, 25th Nov 2015
VimL:" hint: «class-skeleton-hint»
VimL: let s:value_start  = "¡"
VimL: let s:value_end    = s:value_start
VimL: let s:marker_open  = "<+"
VimL: let s:marker_close = "+>"
VimL: let s:reindent     = 1
VimL: let s:clsname = s:Param("clsname", lh#marker#txt(lh#dev#naming#type(expand("%:t:r"))))
VimL: let s:destructor = s:Param("destructor", lh#option#unset())
VimL: " =====[ Parents
VimL: silent! unlet s:parents
VimL: let s:parents = s:Param("parents", [])
VimL: let s:noncopyable = s:Param("noncopyable", 0)
MuT:  if s:noncopyable
VimL:   let s:noncopyable_class = lh#option#get("cpp_noncopyable_class", "boost::noncopyable")
VimL:   " TODO: support auto import of noncopyable file
MuT:    if empty(s:noncopyable_class)
VimL:     call s:PushArgs({"copy-constructor": {"how": "deleted"}})
VimL:     call s:PushArgs({"assignment-operator": {"how": "deleted"}})
MuT:    else
VimL:     let s:parents += [ {s:noncopyable_class : {"how": "include", "visibility": "private"}}]
MuT:    endif
MuT:  endif
VimL: " =====[ Functions
VimL: " --------[ Any Functions
VimL: silent! unlet s:functions
VimL: let s:functions = s:Param("functions", [])
VimL: " --------[ Special Functions
VimL: let s:default_constructor = s:Param("default-constructor", {"visibility": "none"})
VimL: let s:copy_constructor    = s:Param("copy-constructor",    {"visibility": "none"})
VimL: let s:assignment_operator = s:Param("assignment-operator", {"visibility": "none"})
VimL: " In reverse order because of how Include() works
VimL: let s:special_functions = ["destructor", "assignment-operator", "copy-constructor", "default-constructor"]
VimL: let s:spe_func_data = map(copy(s:special_functions), "extend(copy(s:Param(v:val, {})), {'name': v:val})")
VimL: let g:spe_func_data = s:spe_func_data
VimL: let s:pub_special_functions = filter(copy(s:spe_func_data), 'get(v:val, "visibility", "public") == "public" && get(v:val, "how", "") != "deleted"')
VimL: let s:pro_special_functions = filter(copy(s:spe_func_data), 'get(v:val, "visibility", "public") == "protected"')
VimL: let s:pri_special_functions = filter(copy(s:spe_func_data), 'get(v:val, "visibility", "public") == "private" || get(v:val, "how", "") == "deleted"')
VimL: " =====[ The Skeleton
class <+s:clsname+><+lh#cpp#snippets#parents(s:parents)+>
{
public:

VimL: for func in s:pub_special_functions | call s:Include(func.name, "cpp") | endfor
MuT:  if !empty(s:pro_special_functions)

protected:

VimL:   for func in s:pro_special_functions | call s:Include(func.name, "cpp") | endfor
MuT:  endif
MuT:  if !empty(s:pri_special_functions)

private:

VimL:   for func in s:pri_special_functions | call s:Include(func.name, "cpp") | endfor
MuT:  endif
};
