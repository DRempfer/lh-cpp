VimL:" «function» File Template, Luc Hermitte <hermitte {at} free {dot} fr>, 27th Nov 2015
VimL:" hint: «function-hint»
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
MuT:  let s:function = s:Param("function", {})
MuT:  let s:kind = get(s:function, "kind", "")
MuT:  if s:kind =~ '\vconstructor|destructor|assignment-operator'
VimL:   call s:Include(s:kind, 'cpp', s:function)
MuT:    " let s:how = get(s:function, "how", "")
MuT:    " let s:how = s:how =~ "\\vpure|deleted|defaulted" ? " ".lh#cpp#snippets#{s:how}() : ""
MuT:    " let s:clsname = s:Param("clsname", lh#cpp#AnalysisLib_Class#CurrentScope(line("."), "class"))
VimL:   "<+s:clsname+>(<+s:Param("parameters", lh#marker#txt("ctr-parameters"))+>)<+s:how+>;
MuT:  elseif s:kind =~ '\vget'
MuT:  let s:attrb_name = s:function.attribute.name
<+lh#dev#cpp#types#ConstCorrectType(s:function.attribute.type)+> <+lh#dev#naming#getter(s:attrb_name)+>() const{return <+lh#dev#naming#member(s:attrb_name)+>;}
MuT:  elseif s:kind =~ '\vset'
MuT:  let s:attrb_name = s:function.attribute.name
MuT:  let s:attrb_param = lh#dev#naming#param(s:attrb_name)
void <+lh#dev#naming#setter(s:attrb_name)+>(<+lh#dev#cpp#types#ConstCorrectType(s:function.attribute.type)+> <+s:attrb_param+>){<+lh#dev#naming#member(s:attrb_name)+> = <+s:attrb_param+>;}
MuT:  else
MuT:    let s:signature = get(s:function, "signature", "")
MuT:    let s:implementation = get(s:function, "implementation", ";")
MuT:    if s:implementation != ';'
VimL:     let s:implementation = '{'.s:implementation.'}'
MuT:    endif
<+s:signature+><+s:implementation+>
MuT:  endif
VimL: " TODO: definition in separate file, comments
